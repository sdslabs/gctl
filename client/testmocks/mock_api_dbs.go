// Code generated by MockGen. DO NOT EDIT.
// Source: api_dbs.go

// Package testmocks is a generated GoMock package.
package testmocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	openapi "github.com/sdslabs/gctl/client"
	http "net/http"
	reflect "reflect"
)

// MockDbsAPI is a mock of DbsAPI interface
type MockDbsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDbsAPIMockRecorder
}

// MockDbsAPIMockRecorder is the mock recorder for MockDbsAPI
type MockDbsAPIMockRecorder struct {
	mock *MockDbsAPI
}

// NewMockDbsAPI creates a new mock instance
func NewMockDbsAPI(ctrl *gomock.Controller) *MockDbsAPI {
	mock := &MockDbsAPI{ctrl: ctrl}
	mock.recorder = &MockDbsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDbsAPI) EXPECT() *MockDbsAPIMockRecorder {
	return m.recorder
}

// CreateDB mocks base method
func (m *MockDbsAPI) CreateDB(ctx context.Context, databaseType string, localVarOptionals *openapi.CreateDBOpts) (openapi.InlineResponse2002, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDB", ctx, databaseType, localVarOptionals)
	ret0, _ := ret[0].(openapi.InlineResponse2002)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDB indicates an expected call of CreateDB
func (mr *MockDbsAPIMockRecorder) CreateDB(ctx, databaseType, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDB", reflect.TypeOf((*MockDbsAPI)(nil).CreateDB), ctx, databaseType, localVarOptionals)
}

// DeleteDbByUser mocks base method
func (m *MockDbsAPI) DeleteDbByUser(ctx context.Context, db string) (openapi.InlineResponse2002, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDbByUser", ctx, db)
	ret0, _ := ret[0].(openapi.InlineResponse2002)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteDbByUser indicates an expected call of DeleteDbByUser
func (mr *MockDbsAPIMockRecorder) DeleteDbByUser(ctx, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDbByUser", reflect.TypeOf((*MockDbsAPI)(nil).DeleteDbByUser), ctx, db)
}

// FetchDbByUser mocks base method
func (m *MockDbsAPI) FetchDbByUser(ctx context.Context, db string) (openapi.InlineResponse2007, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDbByUser", ctx, db)
	ret0, _ := ret[0].(openapi.InlineResponse2007)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchDbByUser indicates an expected call of FetchDbByUser
func (mr *MockDbsAPIMockRecorder) FetchDbByUser(ctx, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDbByUser", reflect.TypeOf((*MockDbsAPI)(nil).FetchDbByUser), ctx, db)
}

// FetchDbsByUser mocks base method
func (m *MockDbsAPI) FetchDbsByUser(ctx context.Context) (openapi.InlineResponse2007, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDbsByUser", ctx)
	ret0, _ := ret[0].(openapi.InlineResponse2007)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchDbsByUser indicates an expected call of FetchDbsByUser
func (mr *MockDbsAPIMockRecorder) FetchDbsByUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDbsByUser", reflect.TypeOf((*MockDbsAPI)(nil).FetchDbsByUser), ctx)
}
