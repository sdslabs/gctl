// Code generated by MockGen. DO NOT EDIT.
// Source: appmaker.go

// Package testmocks is a generated GoMock package.
package testmocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	openapi "github.com/sdslabs/gctl/client"
	http "net/http"
	reflect "reflect"
)

// MockAppsAPIService is a mock of AppsAPIService interface
type MockAppsAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockAppsAPIServiceMockRecorder
}

// MockAppsAPIServiceMockRecorder is the mock recorder for MockAppsAPIService
type MockAppsAPIServiceMockRecorder struct {
	mock *MockAppsAPIService
}

// NewMockAppsAPIService creates a new mock instance
func NewMockAppsAPIService(ctrl *gomock.Controller) *MockAppsAPIService {
	mock := &MockAppsAPIService{ctrl: ctrl}
	mock.recorder = &MockAppsAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppsAPIService) EXPECT() *MockAppsAPIServiceMockRecorder {
	return m.recorder
}

// CreateApp mocks base method
func (m *MockAppsAPIService) CreateApp(ctx context.Context, language string, application openapi.Application) (openapi.InlineResponse2002, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", ctx, language, application)
	ret0, _ := ret[0].(openapi.InlineResponse2002)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateApp indicates an expected call of CreateApp
func (mr *MockAppsAPIServiceMockRecorder) CreateApp(ctx, language, application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockAppsAPIService)(nil).CreateApp), ctx, language, application)
}

// DeleteAppByUser mocks base method
func (m *MockAppsAPIService) DeleteAppByUser(ctx context.Context, app string) (openapi.InlineResponse2002, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppByUser", ctx, app)
	ret0, _ := ret[0].(openapi.InlineResponse2002)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteAppByUser indicates an expected call of DeleteAppByUser
func (mr *MockAppsAPIServiceMockRecorder) DeleteAppByUser(ctx, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppByUser", reflect.TypeOf((*MockAppsAPIService)(nil).DeleteAppByUser), ctx, app)
}

// FetchAppByUser mocks base method
func (m *MockAppsAPIService) FetchAppByUser(ctx context.Context, app string) (openapi.InlineResponse2003, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAppByUser", ctx, app)
	ret0, _ := ret[0].(openapi.InlineResponse2003)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchAppByUser indicates an expected call of FetchAppByUser
func (mr *MockAppsAPIServiceMockRecorder) FetchAppByUser(ctx, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAppByUser", reflect.TypeOf((*MockAppsAPIService)(nil).FetchAppByUser), ctx, app)
}

// FetchAppsByUser mocks base method
func (m *MockAppsAPIService) FetchAppsByUser(ctx context.Context) (openapi.InlineResponse2003, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAppsByUser", ctx)
	ret0, _ := ret[0].(openapi.InlineResponse2003)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchAppsByUser indicates an expected call of FetchAppsByUser
func (mr *MockAppsAPIServiceMockRecorder) FetchAppsByUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAppsByUser", reflect.TypeOf((*MockAppsAPIService)(nil).FetchAppsByUser), ctx)
}

// FetchLogsByUser mocks base method
func (m *MockAppsAPIService) FetchLogsByUser(ctx context.Context, app string, localVarOptionals *openapi.FetchLogsByUserOpts) (openapi.InlineResponse2005, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLogsByUser", ctx, app, localVarOptionals)
	ret0, _ := ret[0].(openapi.InlineResponse2005)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchLogsByUser indicates an expected call of FetchLogsByUser
func (mr *MockAppsAPIServiceMockRecorder) FetchLogsByUser(ctx, app, localVarOptionals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLogsByUser", reflect.TypeOf((*MockAppsAPIService)(nil).FetchLogsByUser), ctx, app, localVarOptionals)
}

// RebuildAppByUser mocks base method
func (m *MockAppsAPIService) RebuildAppByUser(ctx context.Context, app string) (openapi.InlineResponse2002, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildAppByUser", ctx, app)
	ret0, _ := ret[0].(openapi.InlineResponse2002)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RebuildAppByUser indicates an expected call of RebuildAppByUser
func (mr *MockAppsAPIServiceMockRecorder) RebuildAppByUser(ctx, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildAppByUser", reflect.TypeOf((*MockAppsAPIService)(nil).RebuildAppByUser), ctx, app)
}

// UpdateAppByUser mocks base method
func (m *MockAppsAPIService) UpdateAppByUser(ctx context.Context, app string, application openapi.Application) (openapi.InlineResponse2002, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppByUser", ctx, app, application)
	ret0, _ := ret[0].(openapi.InlineResponse2002)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAppByUser indicates an expected call of UpdateAppByUser
func (mr *MockAppsAPIServiceMockRecorder) UpdateAppByUser(ctx, app, application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppByUser", reflect.TypeOf((*MockAppsAPIService)(nil).UpdateAppByUser), ctx, app, application)
}
