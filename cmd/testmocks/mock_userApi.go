// Code generated by MockGen. DO NOT EDIT.
// Source: ./cmd/user.go

// Package testmocks is a generated GoMock package.
package testmocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	openapi "github.com/sdslabs/gctl/client"
	http "net/http"
	reflect "reflect"
)

// MockUserAPIService is a mock of UserAPIService interface
type MockUserAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockUserAPIServiceMockRecorder
}

// MockUserAPIServiceMockRecorder is the mock recorder for MockUserAPIService
type MockUserAPIServiceMockRecorder struct {
	mock *MockUserAPIService
}

// NewMockUserAPIService creates a new mock instance
func NewMockUserAPIService(ctrl *gomock.Controller) *MockUserAPIService {
	mock := &MockUserAPIService{ctrl: ctrl}
	mock.recorder = &MockUserAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserAPIService) EXPECT() *MockUserAPIServiceMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method
func (m *MockUserAPIService) DeleteUser(ctx context.Context) (openapi.InlineResponse2009, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx)
	ret0, _ := ret[0].(openapi.InlineResponse2009)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockUserAPIServiceMockRecorder) DeleteUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserAPIService)(nil).DeleteUser), ctx)
}

// FetchUser mocks base method
func (m *MockUserAPIService) FetchUser(ctx context.Context) (openapi.InlineResponse2008, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUser", ctx)
	ret0, _ := ret[0].(openapi.InlineResponse2008)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchUser indicates an expected call of FetchUser
func (mr *MockUserAPIServiceMockRecorder) FetchUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUser", reflect.TypeOf((*MockUserAPIService)(nil).FetchUser), ctx)
}

// UpdatePassword mocks base method
func (m *MockUserAPIService) UpdatePassword(ctx context.Context, inlineObject openapi.InlineObject) (openapi.InlineResponse20010, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, inlineObject)
	ret0, _ := ret[0].(openapi.InlineResponse20010)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockUserAPIServiceMockRecorder) UpdatePassword(ctx, inlineObject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserAPIService)(nil).UpdatePassword), ctx, inlineObject)
}
